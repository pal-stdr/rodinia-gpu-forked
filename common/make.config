mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(dir $(mkfile_path))

# include the timing header
FLAGS_TO_ADD = -I$(current_dir) -include my_timing.h -include my_verification.h


CC_FLAGS += $(FLAGS_TO_ADD)
CXX_FLAGS += $(FLAGS_TO_ADD)
NVCC_FLAGS += $(FLAGS_TO_ADD)




############ SETUP CUDA ENV (Start) ############
# This common env settings will be used for all compilers


# CUDA toolkit installation path
# You can also pass this from CLI ("make CUDA CUDA_INSTALL_PATH=/usr/local/cuda-11.4")
CUDA_INSTALL_PATH ?= /usr/local/cuda-11.4


# CUDA SDK/smaples installation path
# You can also pass this from CLI ("make CUDA CUDA_SAMPLES_PATH=/usr/local/cuda-11.4/samples")
# Used in "cuda/cfd/Makefile". There from "CUDA_SAMPLES_PATH"
CUDA_SAMPLES_PATH ?= $(CUDA_INSTALL_PATH)/samples/


# Used in lot of places. But most of them are commented out.
CUDA_DIR = $(CUDA_INSTALL_PATH)


# CUDA toolkit libraries
CUDA_LIB_DIR := $(CUDA_DIR)/lib
ifeq ($(shell uname -m), x86_64)
     ifeq ($(shell if test -d $(CUDA_DIR)/lib64; then echo T; else echo F; fi), T)
     	CUDA_LIB_DIR := $(CUDA_DIR)/lib64
     endif
endif



# Used in "cuda/leukocyte/CUDA/Makefile", "cuda/cfd/Makefile" (But commented out)
SDK_DIR = $(CUDA_SAMPLES_PATH)


CUDA_SDK_COMMON_INCLUDE_PATH := $(CUDA_SAMPLES_PATH)/common/inc
CUDA_SDK_COMMON_LIB_PATH := $(CUDA_SAMPLES_PATH)/lib


# Important
# For "cuda-11.4", sample's default location is "/usr/local/cuda-11.4/samples". So the common headers for samples are located in "/usr/local/cuda-11.4/samples/common/inc".
# But for git cloned sample versions (e.g. "/path/to/cuda-samples/"), common headers are located in "/path/to/cuda-samples/Common"
# Samples common/ is used in used only in "cuda/cfd/Makefile".
# Set the SAMPLES common -I path
# Check if /path/to/common/inc exists (because, for git cloned sample repos, the dir is different)
# Check if $(CUDA_SDK_COMMON_INCLUDE_PATH) exists
ifeq ($(shell [ -d $(CUDA_SDK_COMMON_INCLUDE_PATH) ] && echo exists),)
    # If it doesn't exist, set the paths to the alternative
    CUDA_SDK_COMMON_INCLUDE_PATH = $(CUDA_SAMPLES_PATH)/Common
    CUDA_SDK_COMMON_LIB_PATH = $(CUDA_SAMPLES_PATH)/Common/lib
endif

############ SETUP CUDA ENV (End) ############




# Conditionally set COMPILER_NAME to nvcc if not defined by the user
# If You didn't specify "COMPILER_NAME=" by "make YOUR_TARGET COMPILER_NAME=" command, then by default, COMPILER_NAME= set to "nvcc"
COMPILER_NAME ?= nvcc





# define the compiler name
# Important for generating results "results/cuda/out/timestamp.log"
ifdef COMPILER_NAME
    FLAGS_TO_ADD += -D_MY_COMPILER_NAME_=\"$(COMPILER_NAME)\"
endif


MY_VERIFICATION_DISABLE = 1
ifneq ($(MY_VERIFICATION_DISABLE),0)
    FLAGS_TO_ADD += -DMY_VERIFICATION_DISABLE
endif



# ======== Conditionally load "nvcc.host.make.config" or "polygeist.host.make.config" =========

# If you pass the COMPILER_NAME as "nvcc.something.something.host.make.config", then only the first word chunk berfor "." will be taken from that  (i.e. "nvcc")
# Extract the first chunk
FIRST_WORD_CHUNK_AS_CORE_COMPILER_NAME := $(firstword $(subst ., ,$(COMPILER_NAME)))


$(info FIRST_WORD_CHUNK_AS_CORE_COMPILER_NAME = $(FIRST_WORD_CHUNK_AS_CORE_COMPILER_NAME))


include $(current_dir)/$(FIRST_WORD_CHUNK_AS_CORE_COMPILER_NAME).host.make.config

# ============================================================================================



# OPENCL

# # NVIDIA_DIR
# NV_OPENCL_DIR =/usr/local/cuda
# NV_OPENCL_INC = $(NV_OPENCL_DIR)/include
# NV_OPENCL_LIB = $(NV_OPENCL_DIR)/lib64

# INTEL_DIR
# INTEL_OPENCL_DIR = /opt/intel/opencl
# INTEL_OPENCL_INC = $(INTEL_OPENCL_DIR)/include
# INTEL_OPENCL_LIB = $(INTEL_OPENCL_DIR)

# AMD_DIR
# OPENCL_DIR = /usr/local/cuda
# OPENCL_INC = $(OPENCL_DIR)/include/ 
# OPENCL_LIB = $(OPENCL_DIR)/lib/x86_64/ -lOpenCL
#ifeq ($(shell uname -m), x86_64)
#     ifeq ($(shell if test -d $(OPENCL_DIR)/lib/x86_64/; then echo T; else echo F; fi), T)
#     	OPENCL_LIB = $(OPENCL_DIR)/lib/x86_64/
#     endif
#endif

# # DEFAULT OCL
# OPENCL_DIR = $(NV_OPENCL_DIR)
# OPENCL_INC = $(NV_OPENCL_INC)
# OPENCL_LIB = $(NV_OPENCL_LIB)
